@page "/Resume"
@using LaborExchange.Frontend.Clients;
@using LaborExchange.Frontend.Models.Resume;
@inject ResumeClient Client;
@inject NavigationManager NavigationManager;

@rendermode InteractiveServer

<PageTitle>Резюме</PageTitle>

@if(resume is null){
    <p><em>Loading...</em></p>
} else {
    <EditForm class="mt-3" FormName="ResumeSearchForm" Model="@SearchString" OnValidSubmit="Search">
    <a class="btn btn-primary me-2 " role="button" href="/ResumeEdit">
        <i class="bi bi-file-earmark-plus"></i>
    </a>
        <InputText @bind-Value="SearchString" placeholder="Пошук по резюме"/>
        <button type="submit" class="btn btn-primary">Search</button>
        <button @onclick="ClearSearch" class="btn btn-secondary">Clear search</button>
    </EditForm>

    <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>Ім'я</th>
            <th>Професія</th>
            <th>Вимоги</th>
            <th>Телефон</th>
            <th></th>
    </thead>
    <tbody>
        @foreach (var res in resume) {
            <tr>
                <td>@res.FirstName</td>
                <td>@res.Profession.Name</td>
                <td>@res.Requirements</td>
                <td>@res.Phone</td>
                <td>
                    <div class="d-flex">
                        <a class="btn btn-primary me-2" role="button" href="@GetResumeUrl(res.Id)">
                            <i class="bi bi-eye"></i>
                        </a>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(res)">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                    <DeleteResumeDialog res="@res" />
                </td>
            </tr>
        }
    </tbody>
</table>
}


@code {
    List<Resume>? resume;
    List<Resume>? filtered = new();
    string SearchString = "";

    protected override async Task OnInitializedAsync() {
        resume = await Client.GetResumeAsync() ?? [];
    }

    private static string GetResumeUrl(int id) => $"/ResumeDetails/{id}";

    private string GetDeleteModalId(Resume resume) {
        return $"#{DeleteResumeDialog.GetModalId(resume)}";
    }

    private void Search(){
        if(SearchString != ""){
            foreach(var res in resume){
                if($"{res.FirstName} {res.LastName}".Contains(SearchString, StringComparison.OrdinalIgnoreCase) 
                    || $"{res.LastName} {res.FirstName}".Contains(SearchString, StringComparison.OrdinalIgnoreCase) 
                    || res.Profession.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase)
                    || res.Education?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.LastPositionFirm?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.LastPositionName?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.ReasonOfDismissal?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.MartialStatus?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.LivingCondition?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.Email?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.Phone?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                    || res.Requirements?.Contains(SearchString, StringComparison.OrdinalIgnoreCase) == true
                ){
                    filtered.Add(res);
                }
            }
            resume.Clear();
            foreach(var v in filtered){
                resume.Add(v);
            }
            filtered.Clear();
            NavigationManager.Refresh();

        }
    }

    private async Task ClearSearch(){
        resume.Clear();
        resume = await Client.GetResumeAsync();
        NavigationManager.Refresh();
    }
}