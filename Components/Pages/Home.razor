@page "/"
@using LaborExchange.Frontend.Clients;
@using LaborExchange.Frontend.Models.Vacancies;
@inject VacanciesClient Client;
@inject NavigationManager NavigationManager;

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if(vacancies is null){
    <p><em>Loading...</em></p>
} else {
    <EditForm class="mt-3" FormName="VacancySearchForm" Model="@SearchString" OnValidSubmit="Search">
    <a class="btn btn-primary me-2 " role="button" href="/VacancyEdit">
        <i class="bi bi-file-earmark-plus"></i>
    </a>
        <InputText @bind-Value="SearchString" placeholder="Пошук по вакансіях"/>
        <button type="submit" class="btn btn-primary">Пошук</button>
        <button @onclick="ClearSearch" class="btn btn-secondary">Скинути</button>
    </EditForm>
  
   <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>Компанія</th>
            <th>Посада</th>
            <th>Зарпалта</th>
            <th>Вимоги</th>
            <th></th>
    </thead>
    <tbody>
        @foreach (var vacancy in vacancies) {
            <tr>
                <td>@vacancy.FirmName</td>
                <td>@vacancy.Position.Name</td>
                <td>@vacancy.Payment.ToString("C2")</td>
                <td>@vacancy.Requirements</td>
                <td>
                    <div class="d-flex">
                        <a class="btn btn-primary me-2" role="button" href="@GetVacancyUrl(vacancy.Id)">
                            <i class="bi bi-eye"></i>
                        </a>
                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(vacancy)">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    </div>
                    <DeleteVacancyDialog vacancy="@vacancy" />
                </td>
            </tr>
        }
    </tbody>
</table>
}


@code {
    string SearchString = "";
    List<Vacancy>? vacancies;
    List<Vacancy>? filtered = new();

    protected override async Task OnInitializedAsync() {
        vacancies = await Client.GetVacanciesAsync();
    }

    private static string GetVacancyUrl(int id) => $"/VacancyDetails/{id}";

    private string GetDeleteModalId(Vacancy vacancy) {
        return $"#{DeleteVacancyDialog.GetModalId(vacancy)}";
    }

    private void Search(){
        if(SearchString != ""){
            foreach(var vacancy in vacancies){
                if(vacancy.FirmName.Contains(SearchString, StringComparison.OrdinalIgnoreCase) 
                    || vacancy.Position.Name.Contains(SearchString, StringComparison.OrdinalIgnoreCase)
                    || vacancy.WorkingCondition.Contains(SearchString, StringComparison.OrdinalIgnoreCase)
                    || vacancy.LivingCondition.Contains(SearchString, StringComparison.OrdinalIgnoreCase)
                    || vacancy.Requirements.Contains(SearchString, StringComparison.OrdinalIgnoreCase)
                    ){
                    filtered.Add(vacancy);
                }
            }
            vacancies.Clear();
            foreach(var v in filtered){
                vacancies.Add(v);
            }
            filtered.Clear();
            NavigationManager.Refresh();

        }
    }

    private async Task ClearSearch(){
        vacancies.Clear();
        vacancies = await Client.GetVacanciesAsync();
        NavigationManager.Refresh();
    }
}