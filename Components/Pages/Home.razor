@page "/"
@using LaborExchange.Frontend.Clients;
@using LaborExchange.Frontend.Models.Vacancies;
@using System.Text;
@inject VacanciesClient Client;
@inject NavigationManager NavigationManager;

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if(vacancies is null){
    <p><em>Loading...</em></p>
} else {
    <EditForm class="mt-3" FormName="VacancySearchForm" Model="@SearchString" OnValidSubmit="SearchAsync">
    <a class="btn btn-primary me-2 " role="button" href="/VacancyEdit">
        <i class="bi bi-file-earmark-plus"></i>
    </a>
        <InputText @bind-Value="SearchString" placeholder="Пошук по вакансіях"/>
        <button type="submit" class="btn btn-primary">Пошук</button>
        <button @onclick="ClearSearch" class="btn btn-secondary me-3">Скинути</button>
        <input type="checkbox" @onchange="ShowAllChanged"> <label>Показати архівовані</label>

    <a class="btn btn-primary ms-5 " role="button" href="@GenerateFileUrl()">
        <i class="bi bi-printer"></i>
    </a>
    </EditForm>


 <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>Компанія</th>
            <th>Посада</th>
            <th>Зарпалта</th>
            <th>Вимоги</th>
            <th></th>
            <th>Обрано</th>
    </thead>
    <tbody>
        @foreach (var vacancy in vacancies) {
            @if(@vacancy.IsArchived){
                
            <tr>
                <td>@vacancy.FirmName</td>
                <td>@vacancy.Position.Name</td>
                <td>@vacancy.Payment.ToString("C2")</td>
                <td>@vacancy.Requirements</td>
                <td>
                    <div class="d-flex">

                        <a class="btn btn-primary me-2" role="button" href="@GetVacancyUrl(vacancy.Id)">
                            <i class="bi bi-eye"></i>
                        </a>

                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(vacancy)">
                            <i class="bi bi-x-lg"></i>
                        </button>

                        <label class="ms-2">архівовано</label>

                    </div>
                    <DeleteVacancyDialog vacancy="@vacancy" />
                </td>
                <td>

                </td>
            </tr>
            } else {
            <tr>
                <td>@vacancy.FirmName</td>
                <td>@vacancy.Position.Name</td>
                <td>@vacancy.Payment.ToString("C2")</td>
                <td>@vacancy.Requirements</td>
                <td>
                    <div class="d-flex">

                        <a class="btn btn-primary me-2" role="button" href="@GetVacancyUrl(vacancy.Id)">
                            <i class="bi bi-eye"></i>
                        </a>

                        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(vacancy)">
                            <i class="bi bi-x-lg"></i>
                        </button>

                    </div>
                    <DeleteVacancyDialog vacancy="@vacancy" />
                </td>
                <td>
                    <input type="checkbox" @bind-value="@vacancy.IsSelected"/>
                </td>
            </tr>
            }

        }
    </tbody>
</table>

}


@code {
    string SearchString = "";
    List<Vacancy>? vacancies = new();
    List<Vacancy>? filtered = new();

    protected override async Task OnInitializedAsync() {
        await LoadCurrentVacancies(true);
    }

    private static string GetVacancyUrl(int id) => $"/VacancyDetails/{id}";

    private string GetDeleteModalId(Vacancy vacancy) {
        return $"#{DeleteVacancyDialog.GetModalId(vacancy)}";
    }

    private async Task SearchAsync(){
        if(SearchString != ""){
            var filtered = await Client.GetVacanciesAsync(SearchString);
            vacancies.Clear();
            foreach(var fil in filtered){
                if(!fil.IsArchived){
                    vacancies.Add(fil);
                }
            }
            NavigationManager.Refresh();

        }
    }

    private async Task ClearSearch(){
        SearchString = "";
        await LoadCurrentVacancies(true);
        NavigationManager.Refresh();
    }

    private async Task ShowAllChanged(ChangeEventArgs args){
        await LoadCurrentVacancies(!((bool)(args.Value)));
        NavigationManager.Refresh();
    }
    private async Task LoadCurrentVacancies(bool filtering){
        if(filtering){
            vacancies.Clear();
            filtered.Clear();
            filtered = await Client.GetVacanciesAsync();
            foreach(var f in filtered) {
                if(!f.IsArchived) {
                vacancies.Add(f);
                }   
            }
            filtered.Clear();    
        } else {
            vacancies = await Client.GetVacanciesAsync();
        }
        
    }

    private string GenerateFileUrl(){
        StringBuilder builder = new();
        foreach (var v in vacancies){
            if(v.IsSelected == true){
                builder.Append($"{v.FirmName}: {v.Position.Name} , {v.Contacts}\n");
            }
        }
        var Data = builder.ToString();
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(Data);
        var result = System.Convert.ToBase64String(plainTextBytes);
        return $"data:application/octet-stream;charset=utf-16le;base64,{result}";
    }
}